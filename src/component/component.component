<can-component tag="component-page">
  <style>
    component-page aside {
    }
    component-page component-model {
      display: flex;
      display: -webkit-flex;
    }
    component-page aside {
      flex: 1;
      -webkit-flex: 1;
      margin-right: 1em;
    }
    component-page .information {
      flex: 2.5;
      -webkit-flex: 2.5;
    }
  </style>
  <template>
    <can-import from="canrocks/models/component" />
    <can-import from="canrocks/markdown/" />

    <component-model get="{name=packageName}" {^value}="component">
      {{#isResolved}}
      <aside>
        <div class="installation">
          <h2>Install</h2>
          <pre><code class="bash">npm install {{value.name}} --save</code></pre>
        </div>
        <div class="info">
          <h2>Info</h2>
          <p><strong>Version</strong> {{value.version}}</p>
          {{#if value.dependencies.can}}
          <p><strong>CanJS Version</strong> {{value.dependencies.can}}</p>
          {{/if}}
          <p><a href="{{value.homepage}}">{{value.homepage}}</a></p>
          <p><strong>License</strong> {{value.license}}</p>
        </div>
        <div class="maintainers">
          {{#if maintainers.length}}
          <h2>Maintainers</h2>

          {{#each maintainers}}
          <a href="{{npmPage}}" alt="{{npmPage}}">
            <img src="{{gravatarUrl}}" alt="gravatar" />
          </a>
          {{/each}}
          {{/if}}
        </div>
      </aside>
      <div class="information">
        <h1>{{value.name}}</h1>

        {{#if value.readme}}
        <markdown-content {data}="value.readme"></markdown-content>
        {{else}}
        <div>{{value.description}}</div>
        {{/if}}
      </div>
      {{/isResolved}}
    </component-model>
  </template>
  <script type="view-model">
    var Map = require("can/map/");
    var Maintainer = require("canrocks/models/maintainer");
    require("can/map/define/");

    module.exports = Map.extend({
      define: {
        packageName: {
          type: "string"
        },
        component: {
          value: null
        },
        maintainers: {
          value: Maintainer.List,
          get: function(list){
            var maintainers = this.attr("component.maintainers");
            if(maintainers) {
              list.replace(maintainers.attr());
            }
            return list;
          }
        }
      }
    });
  </script>
  <script type="events">
    var hl = require("canrocks/highlight");
    var requestAnimationFrame = require("canrocks/raf");

    exports.componentChange = function(scope, ev, component){
      if(component)
        this.checkType();

      //Highlighting
      var element = this.element;
      requestAnimationFrame(function(){
        hl.highlightChildren(element);
      });

      this.setTitle();
    };

    // Verify that we are on a correct page and if not set the status code
    // appropriately.
    exports.checkType = function(){
      var viewModel = this.viewModel;
      var component = viewModel.attr("component");
      var root = viewModel.attr("%root");
      var page = root.attr("page");
      var type = component.attr("type");
      var correctPage = type ? type + "s" : "other";
      if(correctPage !== page) {
        root.attr({
          page: correctPage,
          statusCode: 301
        });

      }
    };

    exports["{viewModel} component"] = "componentChange";

    exports.setTitle = function(){
      var vm = this.viewModel;
      vm.attr("%root").attr("title", vm.attr("component.name"));
    };

    exports["{viewModel} component"] = "removeTitle";

    // Remove the title from the markdown section so that there isn't
    // duplicate titles; one from our template and one from the markdown
    exports.removeTitle = function(){
      var component = this.viewModel.attr("component");
      if(component) {
        var id = "#" + component.attr("name");
        this.element.find(id).remove();
      }
    }
  </script>
</can-component>
